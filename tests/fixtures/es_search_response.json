{
    "took": 3,
    "timed_out": false,
    "_shards": {
        "total": 5,
        "successful": 5,
        "skipped": 0,
        "failed": 0
    },
    "hits": {
        "total": 84,
        "max_score": 2.0322325,
        "hits": [
            {
                "_index": "default",
                "_type": "post",
                "_id": "107",
                "_score": 2.0322325,
                "_source": {
                    "id": 107,
                    "title": "Design Guide - Controllers, Services and IOC",
                    "body": "Design Guides\r\n---\r\n\r\n  - Controllers - contains application logic and passing user input data to service\r\n  - Services - The middleware between controller and repository. Gather data from controller, performs validation and business logic, and calling repositories for data manipulation.\r\n  - Repositories - layer for interaction with models and performing DB operations\r\n  - Models - common laravel model files with relationships defined\r\n  \r\n# In and Out Burgers\r\n\r\nBetween the user's request and the response is the application. The above design guide not only gives us a consistent, flexible way to manage a requests and responses from a web user but then leads us into creating applications that can manage consul request as well.\r\n\r\n![in and out](https:\/\/docs.google.com\/drawings\/d\/1D601St_IuaZ8FKW2eXQYqE2vHqZxRRLtmB8eGpQw8Aw\/pub?w=761&h=296)\r\n\r\n\r\nStarting with the book by the Author of Laravel, Tyler Otwell\r\n\r\n[book laravel](https:\/\/leanpub.com\/laravel)\r\n\r\nThe great thing about this book is that it is not really about Laravel but about SOLID design principles\r\n\r\n  * Single responsibility principle\r\n  * Open\/closed principle\r\n  * Liskov substitution principle\r\n  * Interface segregation principle\r\n  * Dependency inversion principle\r\n\r\n[wikipedia solid](http:\/\/en.wikipedia.org\/wiki\/SOLID_(object-oriented_design)\r\n\r\n# Change to scope does not cause bad code, bad design patterns cause bad code.\r\n\r\n*Scope changes and that is fine.* This is key to the success of an application. It must change with the vision of the Product owner as deliverables bring to light what could not be seen on paper, mock ups, whiteboards etc.\r\n\r\nIf we follow the Solid Design Principles then \"change is okay\" and easy.\r\n\r\n# Back to the book \"Laravel: from Apprentice to Artisan\r\n\r\nSo Tyler Otwell goes over each principle showing them in context of Laravel.\r\n\r\nHere are some key design patters to grasp\r\n\r\n## IOC\r\n\r\nInversion of control is fundamental to a flexible application that meets the 5 goals above. By \"coding to an interface\" we can not only work faster as a team but adapt to change easily.\r\n\r\nHow to get here?\r\n\r\nOther than reading the book consider this common example. \r\n\r\n\"Build A Contract\" Taylor Otwell. Laravel: From Apprentice To Artisan (Kindle Location 75 to 185). leanpub.com. \r\n\r\nBy hooking an Interface into the Service Provider we can attach any implementation we want to that interface.\r\n\r\nThis means someone can be working on one part of the app talking to another part that is not even done yet cause they can mock out the responses based on an Interface.\r\n\r\nUsing \r\n\r\n~~~\r\nphp artisan make:provider BillingInterface\r\n~~~\r\nYou will easily setup the class to start with in the app\/Providers folder\r\n\r\nLaravel 5 is taking this to the next level with \"Contracts\/Interfaces\" as a big part of the framework.\r\n\r\n[laracasts contracts](https:\/\/laracasts.com\/series\/whats-new-in-laravel-5\/episodes\/7)\r\n\r\n\r\nThis also means we can easily swap out classes as needed. The book goes over Billing we have another example Queue. We are using Beanstalkd to work locally and Amazon SQS to work on production. This is all done via such design patters. Interfaces\/Contracts around talking to a queue.\r\n\r\n# Controllers\r\n\r\nA request comes in and it sends it to the right service. Finally it delivers the response. Below is an example of what a method in a controller should have and no more.\r\n\r\n~~~\r\napp\/Http\/Controllers\/ProjectsController.php:31\r\n    public function index()\r\n    {\r\n        try\r\n        {\r\n            $results = $this->service->getAllProjectsForThisUser();\r\n            return Response::json($this->responseServices->respond($results, \"Loaded Projects\"), 200);\r\n        }\r\n        catch(\\Exception $e) {\r\n            return Response::json($this->responseServices->respond($e->getMessage(), \"Error Getting Project Failed\"), 422);\r\n        }\r\n\r\n    }\r\n~~~\r\n\r\nIt traps any errors and responds as needed to that error.\r\n\r\n## Issues with above?\r\n\r\nYes! Error codes should come from the Service as well. How does the controller know a 422? \r\n\r\n### Service then does what?\r\n\r\nAs defined above \r\n\r\n\"The middleware between controller and repository. Gather data from controller, performs validation and business logic, and calling repositories for data manipulation.\"\r\n\r\n  * Validation\r\n  * Business Logic\r\n  * Calling Repositories\r\n  * Transform Data in and out \r\n  * Lastly returns the results with a know error code.\r\n  \r\nSince 422 is an HTTP Response \r\n\r\n~~~\r\nvendor\/symfony\/http-foundation\/Symfony\/Component\/HttpFoundation\/Response.php:64\r\n~~~\r\n\r\nWe should have possible a response transformer class to consider the non HTTP response. Then let the Controller pick from that to find its related HTTP response. See the [Build API's You Wont't Hate](https:\/\/leanpub.com\/build-apis-you-wont-hate) for more on that. Covered in the other guide shortly too.\r\n\r\n",
                    "created_at": 1411380890,
                    "updated_at": 1411380970
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "86",
                "_score": 1.9485866,
                "_source": {
                    "id": 86,
                    "title": "Simple Laravel CMS Example",
                    "body": "## Quick intro to Laravel using a custom CMS app I made\r\n\r\nThe repo is [here](https:\/\/github.com\/alnutile\/l4cms)\r\n \r\n![intro](https:\/\/dl-web.dropbox.com\/get\/Screenshots\/intro_image.png?_subject_uid=54803135&w=AADdI8YLw5iRjK91_3LjSHq7b7z0ibM8KY4P7MicRH9UFA)\r\n\r\nThis is mainly to show an example of a small CMS being built in Laravel. CMS (Content Management System) that is at it's most basic level, Authentication, Simple Content Types etc.\r\n\r\nWhat we will cover.\r\n\r\n  * Installing the \"CMS\" and what Page Types it comes with\r\n  * Looking at the folder layout \"Where is....\"\r\n  * App config setting up the site\r\n  * PHP Artisan command to migrate the site\r\n  * Routes\r\n  * Page example looking at the wysiwyg, Controller, View etc\r\n  * Tags - lets add a many to many relationship\r\n  \r\n\r\nThis is NOT the end all setup just an example. There are links below to quality videos, blogs posts docs etc to take you to the next level, not only in Laravel but just Object Oriented Design and good Architecture in general.\r\n\r\nNote the theme has it's own license and you need to purchase it [here](https:\/\/wrapbootstrap.com\/theme\/colorfrog-WB01PG0H4) in order to use it.\r\n\r\n## Install the \"CMS\" and what Page Types it comes with\r\n\r\nThe repo is here https:\/\/github.com\/alnutile\/cms\r\n\r\nIn time I will add more features but it really is an app that was made for a client that the base of it I wanted to fork off for later use.\r\n\r\nRun the basic laravel install steps noted on their site http:\/\/laravel.com\/docs\/quick\r\n\r\n## What Page Types\r\n\r\n * Pages are the main landing pages for most of the site with a slug to manage the url [1]. More on Pages shortly.\r\n * Portfolios was how this project started. Basically you make One and then make projects that reference it. \r\n * Projects are just that. They fit in a Portfolio\r\n * Menu Sorting there is an admin area for menu sorting as well. Right now it is just for the top left menu. (not the black top nav)\r\n \r\nAll these \"Admin\" links can be seen below\r\n\r\n![admin_bar](https:\/\/dl-web.dropbox.com\/get\/Screenshots\/admin_link.png?_subject_uid=54803135&w=AAAXvu_aZZUUGLFbgByRli-WjFgDpVmUDnQxverzi5_ISg)\r\n\r\n\r\n### Every landing page is a Page \r\n\r\nEvery URLs is Page, Project or Portfolio so the editor can always edit the description of the page even if there is a \"collection\" under it. For example \/all_projects is a Page that just happens to also show a collection of \"Projects\" under it. Ideally this will be a less hard coded relationship BUT this particular example just needed a simple data set.\r\n\r\n\r\nThere are Portfolio and Project pages as well that the edit can edit the description on etc.\r\n\r\n\r\n## Looking at the folder layout\r\n\r\nThis is a standard Laravel App. The one key folder is **app\/CMS** for some items. But otherwise the Controllers, Models etc have all the needed data. [2]\r\n\r\nIn app\/CMS there is the Menu Facade, and the MenuService to make managing the menu system easier. [3]\r\n\r\nThe system puts it's uploaded files under public\/img in settings, banners etc\r\n\r\n## App config setting up the site\r\n\r\nThe app default to sqlite and the bootstrap\/start.php will default to local without you needing to set anything.\r\n\r\nRunning migrations will get you a good sample set of data. You can always turn this off in app\/database\/seeds\r\n\r\nIn the app\/database\/seeds\/UsersTableSeeder.php file is the admin and test user emails and passwords to login.\r\n\r\n## Routes\r\n\r\nThe app\/routes.php is where you can manage routes and see what is there right now. \r\n\r\n## Page Example\r\n\r\nYou can edit a page or add a page.\r\n\r\nOnce in there you will see this\r\n\r\n![image_page_edit](https:\/\/dl-web.dropbox.com\/get\/Screenshots\/edit.png?_subject_uid=54803135&w=AADonXAFhGpiKY5JL9u6d248TPQKJMPCDcHTwUi2s2Hk5Q)\r\n\r\n\r\n\r\nYou can give the page a title, SEO title, upload images and files via the wysiwyg and set the slug (Published coming soon so there can be a workflow)\r\n\r\n## Tags\r\n\r\nThere is a tagging feature that does not yet have the UI setup. (coming soon). The resource is setup but needs to be placed in the view\r\n\r\nIn php artisan tinker we can mess around with tags thought\r\n\r\n~~~\r\n\r\nphp artisan tinker\r\n$tag = new Tag(['name' => \"Test 4\"]);\r\nPortfolio::find(1)->tags()->save($tag);\r\nPortfolio::find(1)->tags->toArray();\r\nTag::find(1)->portfolios->toArray();\r\nPortfolio::find(1)->tags()->detach(1);\r\nPortfolio::find(1)->tags()->attach(1);\r\n~~~\r\n\r\nSo we are making a tag, saving it to Portfolio 1. Seeing it attached to Portfolio 1 and Seeing Portfolios attached to it.\r\n\r\n## Links\r\n\r\n * Great videos on Laravel, Oop and design patters https:\/\/laracasts.com\/\r\n * Laravel own docs are great http:\/\/laravel.com\/docs\r\n * Forums and Chat room http:\/\/laravel.io\/forum\r\n * Great overview of Laravel app building http:\/\/culttt.com\/2013\/04\/29\/getting-started-with-laravel-4\/\r\n \r\n\r\n## Footnotes\r\n\r\n  * [1] This will be refactored shortly\r\n  * [2] This will be moved shortly to make it way more extendable but leaving the core easy to manage.\r\n  * [3] Refactor this out so menu is a manyToMany relationship with the models that will use it.\r\n",
                    "created_at": 1401749386,
                    "updated_at": 1401749421
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "181",
                "_score": 1.9170543,
                "_source": {
                    "id": 181,
                    "title": "Getting Going Quickly Windows, Behat and Selenium",
                    "body": "Quick Install Steps\r\n\r\n## Vagrant and Homestead \r\n\r\nThis was easy I just followed these steps [here](http:\/\/sherriflemings.blogspot.ca\/2015\/03\/laravel-homestead-on-windows-8.html) and I was done. For me I used Vmware but Virtualbox is fine.\r\n\r\n## Windows in Selenium\r\n\r\nTwo easy steps\r\n\r\n### Step 1 Install Node.js SUPER EASY\r\n\r\n[https:\/\/nodejs.org\/en\/download\/](https:\/\/nodejs.org\/en\/download\/)\r\n\r\nInstall the .exe, restart your console and you have node!\r\n\r\n### Step 2 Install Selenium\r\n\r\nJust go here and you are done!\r\n[https:\/\/www.npmjs.com\/package\/selenium-standalone](https:\/\/www.npmjs.com\/package\/selenium-standalone)\r\n\r\nAfter those steps I run it in a powershell and the server is running and I am set to use it.\r\n\r\n## Final Touches\r\n\r\nIn my VM I \"sudo vim \/etc\/hosts\" and point it to my selenium on windows using the domain \"selenium.dev\"\r\n\r\n~~~\r\n192.168.7.57    selenium.dev\r\n~~~\r\n\r\nThen my behat.yml looks like this\r\n\r\nSo when I run this inside the VM it knows to talk to the exteral version of Selenium \r\n\r\n~~~\r\ndefault:\r\n    suites:\r\n        home_ui:\r\n            paths: [ %paths.base%\/features\/home]\r\n            contexts: [ HomePageUiContext ]\r\n    extensions:\r\n        Laracasts\\Behat:\r\n            env_path: .env.behat\r\n        Behat\\MinkExtension:\r\n            default_session: laravel\r\n            base_url: https:\/\/recipes.dev\r\n            laravel: ~\r\n            selenium2:\r\n              wd_host: \"http:\/\/selenium.dev:4444\/wd\/hub\"\r\n            browser_name: chrome\r\n~~~\r\n\r\nYou can see more of it [here](https:\/\/github.com\/alnutile\/recipes\/blob\/master\/behat.yml)\r\n\r\n ",
                    "created_at": 1462296071,
                    "updated_at": 1473357085
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "76",
                "_score": 1.8844949,
                "_source": {
                    "id": 76,
                    "title": "Using Dot Env files to manage settings",
                    "body": "Wow. Included in Laravel http:\/\/laravel.com\/docs\/configuration#protecting-sensitive-configuration\r\n\r\n1. removed due to old news\r\n\r\n2. [http:\/\/mattstauffer.co\/blog\/laravel-forge-using-environment-variables-for-environment-detection\/](http:\/\/mattstauffer.co\/blog\/laravel-forge-using-environment-variables-for-environment-detection\/)\r\n\r\n## Update\r\nI really like the second link and how it sets up a .env file first to just return a simple string. After that you can have the .env.production.php or .env.local.php that laravel can look for.\r\n\r\n~~~\r\n\/\/bootstrap\/start.php\r\n$env = $app->detectEnvironment(function()\r\n{\r\n    if (file_exists(__DIR__ . '\/..\/.env')) {\r\n        return include(__DIR__ . '\/..\/.env');\r\n    } else {\r\n        return 'production';\r\n    }\r\n});\r\n~~~\r\n\r\nQuite simple at that point to separate all of the environments.",
                    "created_at": 1400410748,
                    "updated_at": 1402143902
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "163",
                "_score": 1.8243518,
                "_source": {
                    "id": 163,
                    "title": "Spark Setup Issue",
                    "body": "During the install [https:\/\/github.com\/laravel\/spark](https:\/\/github.com\/laravel\/spark) I kept getting this error\r\n\r\n~~~\r\n Problem 1\r\n    - Installation request for laravel\/spark-installer ~1.0 -> satisfiable by laravel\/spark-installer[v1.0.0].\r\n    - Conclusion: remove illuminate\/support v4.2.17\r\n    - laravel\/spark-installer v1.0.0 requires illuminate\/support ~5.0 -> satisfiable by illuminate\/support[v5.0.0, v5.0.22, v5.0.25, v5.0.26, v5.0.28, v5.0.33, v5.0.4, v5.1.1, v5.1.13, v5.1.16, v5.1.2, v5.1.6, v5.1.8].\r\n    - Can only install one of: illuminate\/support[v5.0.0, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.0.22, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.0.25, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.0.26, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.0.28, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.0.33, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.0.4, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.1.1, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.1.13, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.1.16, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.1.2, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.1.6, v4.2.17].\r\n    - Can only install one of: illuminate\/support[v5.1.8, v4.2.17].\r\n    - Installation request for illuminate\/support == 4.2.17.0 -> satisfiable by illuminate\/support[v4.2.17].\r\n~~~\r\n\r\nFinally I went into my ~\/.composer folder. Removed `composer.lock` then I edited the `composer.json` to look like this\r\n\r\n~~~\r\n{\r\n    \"require\": {\r\n        \"laravel\/envoy\": \"~1.0\",\r\n        \"laravel\/installer\": \"~1.1\",\r\n        \"laravel\/spark-installer\": \"~1.0\"\r\n    }\r\n}\r\n~~~\r\n\r\nI use Envoy for a lot of my projects so I left that there and made sure to update my installer.\r\n\r\nThen I ran, in that folder composer update.\r\n\r\nFinally I made sure to add the path to my ~\/.bash_profile as \r\n\r\n~~~\r\nexport PATH=$PATH:\/Users\/alfrednutile\/.composer\/vendor\/bin\/\r\n~~~\r\n\r\nThen ran `source ~\/.bash_profile` \r\n\r\nWith all that in place I could go to my new Laravel install to run `spark install`",
                    "created_at": 1442321916,
                    "updated_at": 1442321916
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "168",
                "_score": 1.8091033,
                "_source": {
                    "id": 168,
                    "title": "Logout User After Inactivity Laravel and Milddleware",
                    "body": "**Original Post** [http:\/\/laravel-tricks.com\/tricks\/session-timeout-for-logged-in-user](http:\/\/laravel-tricks.com\/tricks\/session-timeout-for-logged-in-user)\r\n\r\nThis Middleware made it super easy to satisfy a requirement to log the user out after 15 minutes of in activity.\r\n\r\nI added only a few touchups.\r\n\r\nOne was the `getTimeOut` this was so I can work locally and override this by setting it to a large number.  I could even use it to just bypass the whole things for a bit since on `local` I rather not deal with this. \r\n\r\nAlso I removed the message count since it just was not needed for what I was doing.\r\n\r\n\r\n~~~\r\n<?php namespace App\\Http\\Middleware;\r\nuse Closure;\r\nuse Illuminate\\Support\\Facades\\Auth;\r\nuse Illuminate\\Session\\Store;\r\nclass SessionTimeout {\r\n    protected $session;\r\n    protected $timeout=900;\r\n    public function __construct(Store $session){\r\n        $this->session=$session;\r\n    }\r\n    \/**\r\n     * Handle an incoming request.\r\n     *\r\n     * @param  \\Illuminate\\Http\\Request  $request\r\n     * @param  \\Closure  $next\r\n     * @return mixed\r\n     *\/\r\n    public function handle($request, Closure $next)\r\n    {\r\n        if(!$this->session->has('lastActivityTime'))\r\n            $this->session->put('lastActivityTime',time());\r\n        elseif(time() - $this->session->get('lastActivityTime') > $this->getTimeOut()){\r\n            $this->session->forget('lastActivityTime');\r\n            Auth::logout();\r\n            return redirect('auth\/login')->withErrors(['You had not activity in 15 minutes']);\r\n        }\r\n        $this->session->put('lastActivityTime',time());\r\n        return $next($request);\r\n    }\r\n\r\n    protected function getTimeOut()\r\n    {\r\n        return (env('TIMEOUT')) ?: $this->timeout;\r\n    }\r\n}\r\n~~~",
                    "created_at": 1447485550,
                    "updated_at": 1447485569
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "236",
                "_score": 1.8050572,
                "_source": {
                    "id": 236,
                    "title": "Passing from Blade to VueJs",
                    "body": "A lot of posts had [this](https:\/\/medium.com\/@m_ramsden\/passing-data-from-laravel-to-vue-98b9d2a4bd23) style.\r\n\r\nI ended up just needing this:\r\n\r\n![](https:\/\/dl.dropboxusercontent.com\/s\/huucm3vx4uyklq7\/Screenshot%202018-02-23%2020.29.22.png?dl=0)\r\n\r\nThe controller simply does this:\r\n\r\n![](https:\/\/dl.dropboxusercontent.com\/s\/qw7x7u7ayr7j441\/Screenshot%202018-02-23%2020.29.52.png?dl=0)",
                    "created_at": 1519442724,
                    "updated_at": 1519443006
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "124",
                "_score": 1.7908093,
                "_source": {
                    "id": 124,
                    "title": "Laravel Blade and Angular brackets",
                    "body": "I use one AngularController.php to render main.blade.php file that then renders angular. The only other blade file is the login page.\r\nI could have done this in the routes.php file but since the routes file has the login page I decided to place it in this controller.\r\n\r\n\r\n~~~\r\n<?php namespace App\\Http\\Controllers;\r\n\r\n\r\nuse Illuminate\\Support\\Facades\\Blade;\r\nuse Illuminate\\Support\\Facades\\Config;\r\nuse Illuminate\\Support\\Facades\\View;\r\nuse Laracasts\\Utilities\\JavaScript\\Facades\\JavaScript;\r\n\r\n\r\n\/**\r\n * @Middleware(\"auth\")\r\n *\/\r\nclass AngularController extends BaseController {\r\n\r\n    use UserHelper;\r\n\r\n    \/**\r\n     * @var UserService\r\n     *\/\r\n    private $userService;\r\n\r\n    public function __construct(UserService $userService)\r\n    {\r\n        $this->userService = $userService;\r\n    }\r\n\r\n    \/**\r\n     * @Get(\"behat\", as=\"behat.dash\")\r\n     *\/\r\n\tpublic function index()\r\n\t{\r\n\r\n        Blade::setContentTags('<%', '%>'); \t\t\/\/ for variables and all things Blade\r\n        Blade::setEscapedContentTags('<%%', '%%>'); \t\/\/ for escaped data\r\n        $user_id = $this->getUserId();\r\n        $profile = $this->userService->getPerson($user_id);\r\n        $token = csrf_token();\r\n        $chat_on = Config::get('app.chat_on', true);\r\n        JavaScript::put(\r\n            [\r\n                'pusher_public_key' => $_ENV['PUSHER_PUBLIC'],\r\n                'sauce_key' => $_ENV['SAUCE_TOKEN'],\r\n                'sauce_user' => $_ENV['SAUCE_USER'],\r\n                'profile' => $profile,\r\n                'token' => $token,\r\n                'debug' => Config::get('app.debug'),\r\n            ]\r\n        );\r\n\t\treturn View::make('layouts.main', compact('chat_on'));\r\n\t}\r\n\r\n}\r\n~~~\r\n\r\nThanks to [http:\/\/scotch.io\/bar-talk\/quick-tip-using-laravel-blade-with-angularjs](http:\/\/scotch.io\/bar-talk\/quick-tip-using-laravel-blade-with-angularjs) for the tip",
                    "created_at": 1418995150,
                    "updated_at": 1418995150
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "151",
                "_score": 1.7858448,
                "_source": {
                    "id": 151,
                    "title": "Laravel 5.1 Behat and Codeship",
                    "body": "The new integration testing features with Laravel 5.1 make Behat almost not needed BUT we do a lot of AngularJs work and instead of using karma to test the ui we enjoy using behat since we like the Gherkin Syntax and how we can easily code custom steps in PHP.\r\n\r\nHere are some steps to getting behat going on Codeship so you get full CI even of Angular.\r\n\r\nThis is all based off of [https:\/\/github.com\/laracasts\/Behat-Laravel-Extension](https:\/\/github.com\/laracasts\/Behat-Laravel-Extension)\r\n\r\n\r\n## Behat.yml\r\n\r\nbehat.yml looks like this for me\r\n\r\n~~~\r\ndefault:\r\n    extensions:\r\n        Laracasts\\Behat:\r\n            # env_path: .env.behat\r\n        Behat\\MinkExtension:\r\n            base_url: https:\/\/microservicehub.dev:44300\r\n            default_session: laravel\r\n            laravel: ~\r\n            selenium2:\r\n              wd_host: \"http:\/\/192.168.10.1:4444\/wd\/hub\"\r\n            browser_name: chrome\r\n\r\ncodeship:\r\n    extensions:\r\n        Laracasts\\Behat:\r\n            env_path: .env.codeship\r\n        Behat\\MinkExtension:\r\n            base_url: http:\/\/localhost:8080\r\n            default_session: laravel\r\n            laravel: ~\r\n            selenium2:\r\n              wd_host: \"http:\/\/localhost:4444\/wd\/hub\"\r\n            browser_name: chrome\r\n~~~\r\n\r\nThis is so I can run it locally as needed. The Codeship profile will then call in the `.env.codeship` and update the url as needed.\r\n\r\n## .env.codeship\r\n\r\nThis file has \r\n\r\n~~~\r\nAPP_ENV=testing\r\nAPP_DEBUG=true\r\nAPP_KEY=f5edkkfijPDKQXPLHyYNDhiNZZrpT0Qd\r\n\r\nDB_HOST=localhost\r\nDB_DATABASE=test\r\n\r\nCACHE_DRIVER=file\r\nSESSION_DRIVER=file\r\nQUEUE_DRIVER=sync\r\n\r\nMAIL_DRIVER=smtp\r\nMAIL_HOST=mailtrap.io\r\nMAIL_PORT=2525\r\nMAIL_USERNAME=null\r\nMAIL_PASSWORD=null\r\nMAIL_ENCRYPTION=null\r\n~~~\r\n\r\n## Build Script for Codeship\r\n\r\nUsing the code they offer on their site I add that to my projects folder under tests\/selenium_server.sh it is this file [here](https:\/\/github.com\/codeship\/scripts\/blob\/master\/packages\/selenium_server.sh)\r\n\r\nMaybe some do not need to be there?\r\n\r\n## Codeship Test Settings\r\n\r\nNow in the settings I end up with inside the CodeShip UI are as follows\r\n\r\nHere for example is the URL for my project to find these settings.\r\n\r\n`https:\/\/codeship.com\/projects\/8844\/configure_tests`\r\n\r\nUnder Setup Commands\r\n\r\n~~~\r\n# Set php version through phpenv. 5.3, 5.4 and 5.5 available\r\nphpenv local 5.5\r\n# Install dependencies through Composer\r\ncomposer config -g github-oauth.github.com foobar\r\ntouch .env\r\necho \"APP_ENV='testing'\" >> .env\r\necho \"DB_DATABASE='test'\" >> .env\r\necho \"MYSQL_TESTING_URL='localhost'\" >> .env\r\necho \"APP_KEY=DHMbPIbNLd1jI0ZEZZSxRFOHj03SU4P5\" >> .env\r\necho \"CACHE_DRIVER=file\" >> .env\r\necho \"SESSION_DRIVER=file\" >> .env\r\necho \"QUEUE_DRIVER=sync\" >> .env\r\necho \"MAIL_DRIVER=smtp\" >> .env\r\necho \"MAIL_HOST=smtp.mailgun.org\" >> .env\r\necho \"MAIL_PORT=2525\" >> .env\r\ncomposer install --dev\r\nphp artisan migrate\r\nphp artisan db:seed\r\nnohup bash -c \"sh tests\/selenium_server.sh &\" && sleep 9\r\ncd public && nohup bash -c \"php -S localhost:8080 &\" && sleep 9\r\ncd ..\/\r\n~~~\r\n\r\nUnder Configure Test\r\n\r\n~~~\r\nDB_DATABASE=test phpunit\r\nphp artisan migrate\r\nphp artisan db:seed\r\nvendor\/bin\/behat --profile=codeship --stop-on-failure\r\n~~~\r\n\r\nI run the migration one more time to get it ready for behat\r\n\r\n![behat](https:\/\/dl.dropboxusercontent.com\/s\/2uadht5426s40p8\/behat_codeship.png?dl=0)\r\n",
                    "created_at": 1436020685,
                    "updated_at": 1481767405
                }
            },
            {
                "_index": "default",
                "_type": "post",
                "_id": "95",
                "_score": 1.7688181,
                "_source": {
                    "id": 95,
                    "title": "Many to Many Polymorphic Relations from Laravel to Angular and back",
                    "body": "This will cover having a polymorphic relationship in Laravel, showing it on a form in Angular and saving it back to Laravel. Overall it is well documented [here](http:\/\/laravel.com\/docs\/eloquent#many-to-many-polymorphic-relations) at the great docs at Laravel but this post might help in a few areas.\r\n\r\nAs someone defines Polymorphic Relationships there\r\n\r\n>\"Polymorphic relations allow a model to belong to more than one other model, on a single association. For example, you might have a photo model that belongs to either a staff model or an order model. \"\r\n\r\n## Output the data to Angular\r\n\r\nTaking the User Model as an example I query the user but then before returning the data to Angular I append the polymorphic results. In this case we will call it Specialties\r\n~~~\r\nprotected function transformOutgoingData($data)\r\n    {\r\n        $data->specialties = $data->specialties()->getResults()->lists('id');\r\n        return $data;\r\n    }\r\n~~~\r\n\r\nThis returns just an array to Angular to deal with. When sending it an Object trouble getting Angular to set the selected options. The hard part, since by default it just worked, was to send not only the 2 selected Specialties but the 20 other possible ones and make the list out of that.\r\n\r\n~~~\r\n#angular html file\r\n<div class=\"form-group\" ng-if=\"userHasAdminRole(user)\"  markdown=\"1\">\r\n        <label>Specialties:<\/label>\r\n        <select ng-options=\"specialty.id as specialty.name for specialty in user.specialties_all\"\r\n                name=\"specialty\"\r\n                multiple\r\n                ng-model=\"user.specialties\"\r\n                ng-required=\"true\"\r\n                class=\"form-control\">\r\n        <\/select>\r\n    <\/div>\r\n~~~\r\n\r\nThe specialties_all comes from the method I run on the data before output it which I do anyways on many data models. This comes right before the transformOutgoingData.\r\n\r\n~~~\r\n    protected function addDataToOutGoingModel($user)\r\n    {\r\n        $user = $this->addAllSpecialtiesToModel($user);\r\n        return $user;\r\n    }\r\n~~~\r\n\r\nThis way all my select lists on that page and other data lists, checkboxes etc have the data they need.\r\n\r\nFinally when the person clicks Submit it is sent back to Laravel. So far I could not just save or update the user with this info. For example\r\n\r\n~~~\r\n#app\/models\/User.php\r\n    public function update($user_id, $all)\r\n    {\r\n        $all = $this->transformIncomingData($all);\r\n        try {\r\n            $user = \\User::findOrFail($user_id);\r\n        }\r\n        catch(\\Expection $e){\r\n            throw new \\Exception(\"User not found\");\r\n        }\r\n\r\n        $user->update($all);\r\n        $user = $this->saveDataToModel($user);\r\n        return $user;\r\n    }\r\n~~~\r\n\r\nThe  $user->update($all); will crash with this extra \"specialties\" data coming in with this error.\r\n\r\n>\"preg_replace(): Parameter mismatch, pattern is a string while replacement is an array\"\r\n\r\nSo instead I do a step before and after\r\n\r\nBefore I run transformIncomingData and unset the $all['specialties'] key I get from Input::all() and save that to a property\r\n\r\n~~~\r\n    protected function transformIncomingData($data)\r\n    {\r\n        $data = ( isset($data['specialties'])) ? $this->transformSpecialtiesIncoming($data) : $data;\r\n        return $data;\r\n    }\r\n~~~\r\n\r\nwhich goes to\r\n\r\n~~~\r\n    protected function transformSpecialtiesIncoming($data)\r\n    {\r\n        $this->original_specialities = $data['specialties'];\r\n        unset($data['specialties']);\r\n        return $data;\r\n    }\r\n~~~\r\n\r\nThen after I update the User I run saveDataToModel($user) which triggers this method\r\n\r\n~~~\r\n    protected function setSpecialties($user)\r\n    {\r\n        $user->specialties()->sync($this->original_specialities);\r\n        return $user;\r\n    }\r\n~~~\r\n\r\nFinally back to Angular with the results. \r\n\r\nAnother good way to tie all this together is the Model Observer Pattern noted here [http:\/\/laravel.com\/docs\/eloquent#model-observers](http:\/\/laravel.com\/docs\/eloquent#model-observers)\r\n\r\n",
                    "created_at": 1404524177,
                    "updated_at": 1404573254
                }
            }
        ]
    }
}